/*****************************************************************************************
 * AUTHOR         : BRYCE BERWALD
 * Assignment #1  : Functions & Arrays
 * CLASS          : CS1B
 * SECTION        : MW 7:30-10:00PM
 * DUE DATE       : 09/17/2021 @ 11:59PM
 *****************************************************************************************/

#include "Functions.h"

//Declared variables for the program header to be used by functions.
const char PROGRAMMER[20] = "Bryce Berwald";
const char CLASS[5] = "CS1B";
const char SECTION[25] = "MW: 7:30PM-10:00PM";
const int ASSIGNMENT_NUM = 1;
const char ASSIGNMENT_NAME[20] = "Functions & Arrays";

/****************************************************************************************
* This function will print the class heading to the console.
*****************************************************************************************/
void printHeaderToConsole() {
	//Output the program header to the console.
	cout << left;
	cout << "*******************************************************";
	cout << "\n* PROGRAMMED BY : " << PROGRAMMER;
	cout << "\n* " << setw(14) << "CLASS" << ": " << CLASS;
	cout << "\n* " << setw(14) << "SECTION" << ": " << SECTION;
	cout << "\n* ASSIGNMENT #" << setw(2) << ASSIGNMENT_NUM << ": " << ASSIGNMENT_NAME;
	cout << "\n*******************************************************" << endl;
	cout << right;
}

/*****************************************************************************************
 * This function will print the class heading to the output file specified by the user.
 *****************************************************************************************/
void printHeaderToFile() {

	ofstream oFile;
	oFile.open(Global::outputFileName, ios::app);

	oFile << left;
	oFile << "*******************************************************";
	oFile << "\n* PROGRAMMED BY : " << PROGRAMMER;
	oFile << "\n* " << setw(14) << "CLASS" << ": " << CLASS;
	oFile << "\n* " << setw(14) << "SECTION" << ": " << SECTION;
	oFile << "\n* ASSIGNMENT #" << setw(2) << ASSIGNMENT_NUM << ": " << ASSIGNMENT_NAME;
	oFile << "\n*******************************************************" << endl;
	oFile << right << endl;

	oFile.close();
}

/*****************************************************************************************
 * This function reads the file names from the user using global string variables that
 * are used for the file names in the program.
 *****************************************************************************************/
void readFileNames() {
	cout <<"\nWhat input file would you like to use?";
	cin >> Global::inputFileName;

	cout << "\nWhat output file would you like to use?";
	cin >> Global::outputFileName;
}

/*****************************************************************************************
 * This function uses the input file name specified by the user to extract the ID #s,
 * names and balances into 3 parallel arrays to be used by the main program.
 *****************************************************************************************/
void getDataFromInputFile(string personsFullName[], int personsID[], float personsBalance[], const int MAX_VALUES) {

	string fullName;
	int ID;
	float balance;

	ifstream inFile;
	inFile.open(Global::inputFileName);

	if (inFile.is_open()) {
		for (int i = 0; i < MAX_VALUES; i++) {
			getline(inFile, fullName);
			personsFullName[i] = fullName;

			inFile >> ID;
			personsID[i] = ID;

			inFile >> balance;
			personsBalance[i] = balance;

			inFile.ignore(10000, '\n');

		}
	}

    inFile.close();

	ofstream oFile;
	oFile.open(Global::outputFileName, ios::app);
	oFile << left;
	oFile << "" << setw(10) << "ID # " << "" << setw(30) << "Name " << "" << setw(40) << "BALANCE DUE" << endl;
	oFile << "" << setw(10) << "-----" << "" << setw(30) << "--------------------" << "" << setw(30) << "-----------" << endl;

    // Write the list of all data entries from the input file to the output file now.
	for (int i = 0; i < MAX_VALUES; i++) {
	    oFile << left << setw(10) << personsID[i]
			  << setw(30) << personsFullName[i] << "$" << setw(10)
			  << right << setprecision(2) << fixed << personsBalance[i] << '\n' << '\n';
	}
    oFile << "\n\n\n";
    oFile.close();
}

/*****************************************************************************************
 * This function will print the record heading to the output file as needed.
 *****************************************************************************************/
void printRecordHeadingToFile() {

	ofstream oFile;
	oFile.open(Global::outputFileName, ios::app);

	oFile << left;
	oFile << "" << setw(10) << "ID # " << "" << setw(30) << "Name " << "" << setw(40) << "BALANCE DUE" << endl;
	oFile << "" << setw(10) << "-----" << "" << setw(30) << "--------------------" << "" << setw(30) << "-----------" << endl;

	oFile.close();

}

/*****************************************************************************************
 * This function will find the smallest or largest balance depending on the users
 * selection from the menu options. Function returns index needed to the main program.
 *****************************************************************************************/
int findSmallerOrLargerBalance(float personsBalance[], int MAX_VALUES, int menuOptionChosen) {

	float balanceAmount = 0;

	int indexOfBalance = 0;

	switch(menuOptionChosen) {
		case 1:
			//Execute finding the largest balance.
			balanceAmount = personsBalance[0];
			for (int i = 0; i < MAX_VALUES; i++) {
				if (personsBalance[i] > balanceAmount) {
					balanceAmount = personsBalance[i];
					indexOfBalance = i;
				}
			}
			break;
		case 2:
			//Execute finding the smallest balance.
			balanceAmount = personsBalance[0];
			for (int i = 0; i < MAX_VALUES; i++) {
				if (personsBalance[i] < balanceAmount) {
					balanceAmount = personsBalance[i];
					indexOfBalance = i;
				}
			}
			break;
		default:
			//Error Check, because something must have gone wrong!
			cout << "\nSomething went wrong..." << endl;
			break;
	}
	return indexOfBalance;
}

/*****************************************************************************************
 * This function will find the sum or average of all balances depending on the users
 * selection from the menu options. Function returns a floating point number.
 *****************************************************************************************/
float findSumOrAverageBalance(float personsBalance[], int MAX_VALUES, int menuOptionChosen) {

	//Temporary variable used by this sub program.
	float amount = 0;

	switch(menuOptionChosen) {
		case 3:
			//Execute finding the sum of all balances...
			for (int i = 0; i < MAX_VALUES; i++) {
				amount += personsBalance[i];
			}
			break;
		case 4:
			//Execute finding the average of all balances...
			for (int i = 0; i < MAX_VALUES; i++) {
				amount += personsBalance[i];
			}
			amount = amount / MAX_VALUES;
			break;
		default:
			//Error Check, because something must have gone wrong!
			cout << "\nSomething went wrong..." << endl;
			break;
	}
	return amount;
}

/*****************************************************************************************
 * This function will search for a person in the personsFullName array and returns the
 * proper index for the person found.
 *****************************************************************************************/
int findPerson(string personsFullName[], const int MAX_VALUES) {

	string nameSearchedFor;

	cout << "Who do you want to search for (enter done to exit): ";
	cin >> nameSearchedFor;

	for (int i = 0; i < MAX_VALUES; i++) {
		if (tolower(personsFullName[i]) == (tolower(nameSearchedFor))){
			cout << "\nPerson Found.";
			return i;
		} else {
			cout << "\n" << nameSearchedFor << " was not found.";
			return -1;
		}
	}
}




